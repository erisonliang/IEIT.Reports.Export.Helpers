<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IEIT.Reports.Export.Helpers</name>
    </assembly>
    <members>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.SheetDataGetCell">
            <summary>
            Позволяет получить объект ячейки по указанному адресу из данных листа (объекта SheetData).
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.SheetDataGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.SheetData,System.String)">
            <summary>
            Получить объект ячейки по указанному адресу. 
            </summary>
            <param name="sheetData">Данные листа из которого нужно получить ячейку</param>
            <param name="cellAddress">Адрес новой ячейки</param>
            <returns>Созданную ячейку, если ячейка не существовала</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.SheetDataGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.SheetData,System.Int32,System.Int32)">
            <summary>
            Получить объект ячейки по указанному адресу. 
            </summary>
            <param name="sheetData">Данные листа (SheetData)</param>
            <param name="columnNumber">Номер колонки ячейки</param>
            <param name="rowNumber">Номер строки ячейки</param>
            <returns>Созданную ячейку, если ячейка не существовала</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.SheetDataGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.SheetData,System.UInt32,System.UInt32)">
            <summary>
            Получить объект ячейки по указанному адресу. 
            </summary>
            <param name="sheetData">Данные листа (SheetData)</param>
            <param name="columnNumber">Номер колонки ячейки</param>
            <param name="rowNumber">Номер строки ячейки</param>
            <returns>Созданную ячейку, если ячейка не существовала</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.SheetDataGetRow">
            <summary>
            Позволяет получить объект строки по указанному адресу из данных листа (объекта SheetData).
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.SheetDataGetRow.GetRow(DocumentFormat.OpenXml.Spreadsheet.SheetData,System.UInt32)">
            <summary>
            Получить строку. 
            Создается новый элемент строки, если строка еще не существует.
            </summary>
            <param name="sheetData">Данные листа в котором находится требуемая строка</param>
            <param name="rowNum">Номер запрашиваемой строки</param>
            <returns>Объект строки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.SheetDataGetRow.GetRow(DocumentFormat.OpenXml.Spreadsheet.SheetData,System.Int32)">
            <summary>
            Получить строку. 
            Создается новый элемент строки, если строка еще не существует.
            </summary>
            <param name="sheetData">Данные листа в котором находится требуемая строка</param>
            <param name="rowNum">Номер запрашиваемой строки</param>
            <returns>Объект строки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellFormatsCellFormat.CellFormat(DocumentFormat.OpenXml.Spreadsheet.CellFormats,System.Int32)">
            <summary>
            Получть стиль ячейки по его ID
            </summary>
            <param name="cellFormats">Таблица форматов ячеек</param>
            <param name="formatIndex">ID формата ячейки</param>
            <returns>Возвращает объект стиля ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellFormatsCellFormat.CellFormat(DocumentFormat.OpenXml.Spreadsheet.CellFormats,System.UInt32)">
            <summary>
            Получть стиль ячейки по его ID
            </summary>
            <param name="cellFormats">Таблица форматов ячеек</param>
            <param name="formatIndex">ID формата ячейки</param>
            <returns>Возвращает объект стиля ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellFormatsCellFormat.CellFormat(DocumentFormat.OpenXml.Spreadsheet.CellFormats,DocumentFormat.OpenXml.Spreadsheet.CellFormat)">
            <summary>
            Вставить стиль ячейки используя класс CellFormat
            </summary>
            <param name="cellFormats">Таблица форматов ячеек</param>
            <param name="format">Объект формата ячейки, содержащии информицию о стиле ячейки.</param>
            <returns>ID вставленнго формата ячейки в структуре документа.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.FontsFont.Font(DocumentFormat.OpenXml.Spreadsheet.Fonts,System.Int32)">
            <summary>
            Получить формат текста
            </summary>
            <param name="fonts">таблица форматов текста</param>
            <param name="fontIndex">индекс формата текста</param>
            <returns>возвращает объект формата текста</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.FontsFont.Font(DocumentFormat.OpenXml.Spreadsheet.Fonts,System.UInt32)">
            <summary>
            Получить формат текста
            </summary>
            <param name="fonts">таблица форматов текста</param>
            <param name="fontIndex">индекс формата текста</param>
            <returns>возвращает объект формата текста</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.FontsFont.Font(DocumentFormat.OpenXml.Spreadsheet.Fonts,DocumentFormat.OpenXml.Spreadsheet.Font)">
            <summary>
            Вставить формат текста
            </summary>
            <param name="fonts">таблица форматов текста</param>
            <param name="font">объект формата текста</param>
            <returns>возвращает индекс формата текста</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.NumberingFormatsNumFormat.NumFormat(DocumentFormat.OpenXml.Spreadsheet.NumberingFormats,System.Int32)">
            <summary>
            Получить формат числа
            </summary>
            <param name="numFormats">таблица форматов чисел</param>
            <param name="formatIndex">индекс формата числа</param>
            <returns>возвращает объект формата числа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.NumberingFormatsNumFormat.NumFormat(DocumentFormat.OpenXml.Spreadsheet.NumberingFormats,System.UInt32)">
            <summary>
            Получить формат числа
            </summary>
            <param name="numFormats">таблица форматов чисел</param>
            <param name="formatIndex">индекс формата числа</param>
            <returns>возвращает объект формата числа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.NumberingFormatsNumFormat.NumFormat(DocumentFormat.OpenXml.Spreadsheet.NumberingFormats,DocumentFormat.OpenXml.Spreadsheet.NumberingFormat)">
            <summary>
            Вставить формат числа в структуру документа
            </summary>
            <param name="numFormats">таблица форматов чисел</param>
            <param name="numFormat">формат числа</param>
            <returns>Индекс вставленного формата числа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetCellFormat.CellFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.CellFormat)">
            <summary>
            Вставить стиль ячейки используя класс CellFormat
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <param name="format">Объект формата ячейки, содержащии информицию о стиле ячейки.</param>
            <returns>ID вставленнго формата ячейки в структуре документа.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetCellFormat.CellFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.UInt32)">
            <summary>
            Получть стиль ячейки по его ID
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <param name="formatIndex">ID формата ячейки</param>
            <returns>Возвращает объект стиля ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetCellFormat.CellFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Int32)">
            <summary>
            Получть стиль ячейки по его ID
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <param name="formatIndex">ID формата ячейки</param>
            <returns>Возвращает объект стиля ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetFill.Fill(DocumentFormat.OpenXml.Spreadsheet.Fills,System.Int32)">
            <summary>
            Получить стиль заливку по ID стиля заливки
            </summary>
            <param name="fills">Таблица стилей заливки</param>
            <param name="fillIndex">Индекс стиля заливки</param>
            <returns>Объекь стиля заливки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetFont.Font(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Int32)">
            <summary>
            Получить формат текста
            </summary>
            <param name="stylesheet">таблица стилей</param>
            <param name="fontIndex">индекс формата текста</param>
            <returns>возвращает объект формата текста</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetFont.GetFont(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.UInt32)">
            <summary>
            Получить формат текста
            </summary>
            <param name="stylesheet">таблица стилей</param>
            <param name="fontIndex">индекс формата текста</param>
            <returns>возвращает объект формата текста</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetFont.Font(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.Font)">
            <summary>
            Вставить формат текста
            </summary>
            <param name="stylesheet">таблица стилей</param>
            <param name="font">объект формата текста</param>
            <returns>возвращает индекс формата текста</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetGetCellFormats.GetCellFormats(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>
            Получить таблицу стилей ячеек
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <returns>Объект таблицы стилей ячеек</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetGetFonts.GetFonts(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>
            Получить таблицу форматировании текста. Создает, если такого нет.
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <returns>возвращает таблицу форматировании текста</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetGetNumFormats.GetNumFormats(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>
            Получить таблицу формата чисел
            </summary>
            <param name="stylesheet">таблица стилей</param>
            <returns>возвращает таблицу формата чисел</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetMakeCellStyle.MakeCellStyle(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.CellFormat)">
            <summary>
            Вставить стиль ячейки используя класс CellFormat
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <param name="cellFormat">Объект формата ячейки, содержащии информицию о стиле ячейки.</param>
            <returns>ID вставленнго формата ячейки в структуре документа.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetMakeCellStyle.MakeCellStyle(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>
            Создать новый стиль ячейки
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <returns>"Намерение" для создания стиля ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.BordersGetBorder.GetBorder(DocumentFormat.OpenXml.Spreadsheet.Borders,System.Int32)">
            <summary>
            Получить объект стиля границ ячейки
            </summary>
            <param name="borders">Оъект содержащий элементы стлия границ ячеек</param>
            <param name="borderIndex">Индекс объекта</param>
            <returns>Объект границ ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.BordersGetBorder.GetBorder(DocumentFormat.OpenXml.Spreadsheet.Borders,System.UInt32)">
            <summary>
            Получить объект стиля границ ячейки
            </summary>
            <param name="borders">Оъект содержащий элементы стиля границ ячеек</param>
            <param name="borderIndex">Индекс объекта</param>
            <returns>Объект границ ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.BordersMakeBorder.MakeBorder(DocumentFormat.OpenXml.Spreadsheet.Borders,DocumentFormat.OpenXml.Spreadsheet.Border)">
            <summary>
            Создать стиль границы ячеек. Возвращает индекс 
            созданного стиля.
            Не создает обект если такой стиль уже иммется, и
            возвращает индекс уже созданного стиля.
            </summary>
            <param name="borders">Оъект содержащий элементы стиля границ ячеек</param>
            <param name="border">Стиль границ ячейки</param>
            <returns>
            Возвращает индекс созданного стиля границы, или индекс имееющегося стиля границы.
            </returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.BordersMakeBorder.MakeBorder(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.Border)">
            <summary>
            Создать стиль границы ячеек. Возвращает индекс 
            созданного стиля.
            Не создает обект если такой стиль уже иммется, и
            возвращает индекс уже созданного стиля.
            </summary>
            <param name="stylesheet">Таблица границ ячеек</param>
            <param name="border">Стиль границ ячеек</param>
            <returns>Возвращает индекс созданного стиля, или индекс имееющегося стиля.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellValueGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.CellValue)">
            <summary>
            Получить ячейку данного значения
            </summary>
            <param name="cellValue">Значение ячейки</param>
            <returns>Родительский элемент, ячейку в котором хранится данное значение</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellAppendText.AppendText(DocumentFormat.OpenXml.Spreadsheet.Cell,System.String,DocumentFormat.OpenXml.Spreadsheet.RunProperties)">
            <summary>
            Добавление текста в ячейку
            </summary>
            <param name="cell">Ячейка в которую ведется запись</param>
            <param name="text">Добавляемый текст</param>
            <param name="styles">Стиль добавляемого текта</param>
            <returns>Всегда true</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellAppendText.TurnValueToInlineString(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Переместить значение хранящиеся в данном объекте в форматированную строку
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellGetColumn.GetColumn(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Получить объект <see cref="T:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column"/>
            для работы со столбцом в которой находится ячейка.
            </summary>
            <param name="cell">Объект ячейки OpenXML</param>
            <returns>
            объект для работы со столбцом, в которой находится ячейка
            </returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellGetRow.GetRow(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Получить строку в которой находится данная ячейка
            </summary>
            <param name="cell">Объект ячейки OpenXML</param>
            <returns>Объект строки, в которой находится ячейка</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellGetSharedStringItem.GetSharedStringItem(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Получить <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringItem"/> объект относящийся к данной ячейке.
            Возвращяет null если у данной ячейки нет такого объекта.
            </summary>
            <param name="cell">Ячейка документа</param>
            <returns> <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringItem"/> объект относящийся к данной ячейке</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellGetValue.GetValue(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Получить значение ячейки
            </summary>
            <param name="cell">Ячейка, значение которой нужно получить</param>
            <returns>Значение ячейки, если имеется. null, если значение не найдено</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellGetWorkbookPart.GetWorkbookPart(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Получить рабочюю книгу документа в которой находится данная ячейка
            </summary>
            <param name="cell">Ячейка документа</param>
            <returns>Рабочая книга документа в которой находится данная ячейка</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellGetWorksheet.GetWorksheet(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Получить рабочий лист в которой находится ячейка
            </summary>
            <param name="cell">Ячейка документа</param>
            <returns>Рабочий лист в которой находится ячейка</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellMakeValueShared.MakeValueShared(DocumentFormat.OpenXml.Spreadsheet.Cell,System.Boolean)">
            <summary>
            Переместить значение хранящиеся в данном объекте в SharedString.
            Не преобразует значения типа <see cref="F:DocumentFormat.OpenXml.Spreadsheet.CellValues.Boolean"/>
            <see cref="F:DocumentFormat.OpenXml.Spreadsheet.CellValues.Date"/> <see cref="F:DocumentFormat.OpenXml.Spreadsheet.CellValues.Error"/>
            <see cref="F:DocumentFormat.OpenXml.Spreadsheet.CellValues.Number"/> если не указан параметр <paramref name="force"/> как true
            </summary>
            <param name="cell">Ячейка, значение которой нужно сделать общим</param>
            <param name="force">Флаг "насильного" преобразования, если указан как true, то преобразует значение не смотря на его тип.
            А если указан false (по умолчанию), то преобразует только строковые значения.
            </param>
            <returns>Преобразованное значение <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringItem"/> при удачном преобразовании, 
            либо null в обратном случае</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.CellSetBorder">
            <summary>
            Управление границами ячейки
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellSetBorder.Set(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.Border)">
            <summary>
            Задать стиль границы для ячейки
            </summary>
            <param name="cell">Объект ячейки</param>
            <param name="border">Объект границы</param>
            <returns></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellSetBorder.Set(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.BorderPropertiesType[])">
            <summary>
            Задать стиль границ для ячейки для каждой стороны
            </summary>
            <param name="cell"></param>
            <param name="borderProps">
                Свойства границ
            </param>
            <example>
            <code>
                new LeftBorder();    
                new RightBorder();    
                new TopBorder();    
                new BottomBorder();    
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellWrite.WriteText(DocumentFormat.OpenXml.Spreadsheet.Cell,System.String)">
            <summary>
            Запись текста в ячейку
            </summary>
            <param name="cell">Ячейка в которую ведется запись</param>
            <param name="value">Записываемый текст</param>
            <returns>Всегда true</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellWrite.WriteNumber(DocumentFormat.OpenXml.Spreadsheet.Cell,System.String)">
            <summary>
            Запись числа в ячейку
            </summary>
            <param name="cell">Ячейка в которую ведется запись</param>
            <param name="value">Записываемое число</param>
            <returns></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellWrite.WriteFormula(DocumentFormat.OpenXml.Spreadsheet.Cell,System.String)">
            <summary>
            Запись формулы в ячейку
            </summary>
            <param name="cell">Ячейка в которую ведется запись</param>
            <param name="formula">Записываемая формула</param>
            <returns>Всегда true</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.CellWrite.Write(DocumentFormat.OpenXml.Spreadsheet.Cell,System.String)">
            <summary>
            Запись значения в ячейку
            <para>-Запись текста</para>
            <para>-Запись числа</para>
            <para>-Запись формулы</para>
            </summary>
            <param name="cell">Ячейка в которую ведется запись</param>
            <param name="value">Записываемое значение</param>
            <returns></returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.ElementsRemove">
            <summary>
            Удаление элементов
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.ElementsRemove.RemoveElements(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement},System.Boolean)">
            <summary>
            Удаляет элементы
            </summary>
            <param name="elements">Элементы которые будут удалены</param>
            <param name="deleteSectionIfEmpty">
                Если указан как true, то удаляется также родительские 
                элементы когда они остаются пустыми.
            </param>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentOffice2010Compatablility">
            <summary>
            Настройка совместимости документа с Office 2010
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentOffice2010Compatablility.Office2010Compatablity(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Настраивает документ на совместимость с Office 2010
            (удаляет элементы которые несовместимы с Office 2010)
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentOffice2010Compatablility.RemoveUnknownElementsFromWorkbook(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Удаление неизвестных элементов
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentOffice2010Compatablility.RemoveOffice2013TimelineStyles(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Удаленин элементов TimelineStyles
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DFormatsAddDFormat.AddDFormat(DocumentFormat.OpenXml.Spreadsheet.DifferentialFormats,DocumentFormat.OpenXml.Spreadsheet.DifferentialFormat)">
            <summary>
            Добавить формат для условного форматирования ячеек.
            Возвращает индекс добавленного формата.
            </summary>
            <param name="formatsList">Объект содержащий форматы данного типа</param>
            <param name="format">Новый формат</param>
            <returns>Индекс добавленного формата</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1">
            <summary>
            Класс для осуществления "намерения" для вставки нового дочернего элемента в другой элемент
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.ParentElem">
            <summary>
            Родительский элемет. В этот элемент производится вставка нового элемента.
            </summary>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.newChild">
            <summary>
            Вставляемый элемент
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.#ctor(DocumentFormat.OpenXml.OpenXmlElement,`0)">
            <summary>
            Конструктор который инициализирует "Намерение" для вставки нового элемента в родительский
            </summary>
            <param name="parentElem">Родитель в корорый вставляется новый элемент</param>
            <param name="newChild">Новый, вставляемый элемент</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1._After(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Делегат для вставки элемента после указанного
            </summary>
            <param name="refChild">Элемент, после которго вставляется новый элемент</param>
            <returns>true при удачной вставке, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1._Before(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Делегат для вставки элемента до указанного
            </summary>
            <param name="refChild">Элемент, до которго вставляется новый элемент</param>
            <returns>true при удачной вставке, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.AfterOneOf(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Вставка элемента после первого из указанных, у которого значение не null.
            Хотя бы один элемент должен быть не null, иначе вставка не произойдет.
            </summary>
            <param name="refChilds">Элементы в порядке, после первого из которых требуется вставить новый элемент</param>
            <returns>true при удачной вставке, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.AfterOneOf(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement},System.Boolean)">
            <summary>
            Вставка элемента после первого из указанных, у которого значение не null.
            Хотя бы один элемент должен быть не null, иначе вставка не произойдет.
            </summary>
            <param name="refChilds">Элементы в порядке, после первого из которых требуется вставить новый элемент</param>
            <param name="force">Укажите true для вставки элемента даже если все элементы в списке null</param>
            <returns>true при удачной вставке, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.AfterOneOf(System.Type[])">
            <summary>
            Вставка элемента после первого из элементов с указанным типом.
            Если не найдено ни одного элемента из указанных, вставка не произойдет.
            </summary>
            <param name="childTypes">Типы элементов в нужном порядке, после первого элемента данного типа из которых требуется вставить новый элемент</param>
            <returns>true при удачной вставки, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.BeforeOneOf(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Вставка элемента до первого из указанных, у которого значение не null.
            Хотя бы один элемент должен быть не null, иначе вставка не произойдет.
            </summary>
            <param name="refChilds">Элементы в порядке, до первого из которых требуется вставить новый элемент</param>
            <returns>true при удачной вставки, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.BeforeOneOf(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement},System.Boolean)">
            <summary>
            Вставка элемента до первого из указанных, у которого значение не null.
            Хотя бы один элемент должен быть не null, иначе вставка не произойдет.
            </summary>
            <param name="refChilds">Элементы в порядке, до первого из которых требуется вставить новый элемент</param>
            <param name="force">Укажите true для вставки элемента даже если все элементы в списке null</param>
            <returns>true при удачной вставке, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.BeforeOneOf(System.Type[])">
            <summary>
            Вставка элемента до первого из элементов с указанным типом.
            Если не найдено ни одного элемента из указанных, вставка не произойдет.
            </summary>
            <param name="childTypes">Типы элементов в нужном порядке, до первого элемента данного типа из которых требуется вставить новый элемент</param>
            <returns>true при удачной вставки, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.GetChildsFromTypes(System.Type[])">
            <summary>
            Получить элементы с указанными типами в той же последоваетльности
            </summary>
            <param name="childTypes">Типы дочерних элементов</param>
            <returns>Элементы с указанными типами в той же последоваетльности</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1.ToOneOf(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement},System.Func{DocumentFormat.OpenXml.OpenXmlElement,System.Boolean})">
            <summary>
            Вставка элемента в каком либо отношении к другим дочерним элементам.
            </summary>
            <param name="refChilds">Дочерние элементы в отношении которых вставляется новый элемент</param>
            <param name="insertDeleg">Делегат который определяет с каким именно отношением к другим дочерним элементам будет вставлен новый элемент</param>
            <returns>true при удачной вставки, false в обратном случае</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent">
            <summary>
            Класс для вставки копируемого значения
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent.srcWorksheet">
            <summary>
            Лист из которого копируется значения ячеек
            </summary>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent.srcAddresses">
            <summary>
            Область копируемых ячеек.
            </summary>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent._rowsCount">
            <summary>
            Количество копируемых строк
            </summary>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent._colsCount">
            <summary>
            Количество копируемых колонок     
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent.#ctor(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Конструктор для определения копируемых ячеек для последующей вставки
            </summary>
            <param name="sourceWorksheet">Лист где находятся копируемые ячейки</param>
            <param name="cellsRange">Область копируемых ячеек</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent.To(System.String)">
            <summary>
            Вставить элемент в тот же лист, в  указанный адрес ячейки
            </summary>
            <param name="targetCellAddr">Адрес ячейки для вставки, одна ячейка (верхняя-левая)</param>
            <returns>"Намерение для вставки копированного значения"</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent.To(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Вставить элемент в указанный лист и адрес ячейки
            </summary>
            <param name="targetWorksheet">Лист куда вставляется копированное значение</param>
            <param name="targetCellAddr">Адрес ячейки для вставки, одна ячейка (верхняя-левая)</param>
            <returns>"Намерение для вставки копированного значения"</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1">
            <summary>
            Класс для хранения значении для единичного отрабатывания
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1.Fired">
            <summary>
            Статус отработки значения
            </summary>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1._value">
            <summary>
            Отрабатываемое значение
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1.Value">
            <summary>
            Отрабатываемое значение. 
            При присвоении, значение <see cref="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1.Fired"/> становится false
            </summary>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1._fireFunc">
            <summary>
            Функция (делегат) отработки значения
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1.#ctor(System.Func{DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,`0,System.Boolean})">
            <summary>
            Конструктор
            </summary>
            <param name="fireFunction">Функция отработки</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1.Fire(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,`0)">
            <summary>
            Вызов отрабатываемой функции. При успешной отработки делегата
            свойству <see cref="F:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.Firable`1.Fired"/> присваивается значение true
            </summary>
            <param name="ws"></param>
            <param name="cellAddress"></param>
            <param name="val"></param>
            <returns>true если делегат отработал успешно, false в обратном случае</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent">
            <summary>
            Класс описывающии "Намерение" для записи данных в ячейку или изменение его стиля.
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.#ctor(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Создает "намерение" для изменения своиств ячейки.
            </summary>
            <param name="ws">Рабочий лист в котором будут изменения</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.#ctor(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Func{DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,System.String,System.Boolean})">
            <summary>
            Создает "намерение" для изменения своиств ячейки 
            с переопределением поведения записи значения в ячейку.
            Используйте этот конструктор только в случае если конструктор 
            <see cref="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.#ctor(DocumentFormat.OpenXml.Spreadsheet.Worksheet)"/> не дает нужных результатов
            </summary>
            <param name="ws">Рабочий лист в котором будут изменения</param>
            <param name="writeDeleg">
            Делегат для записи значении в ячейку. 
            По сути это определяет то, как будет записыватся значение в ячейку.
            </param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.To(System.String)">
            <summary>
            Запись в ячейку или присвоения стиля ячейки с указанным адресом
            </summary>
            <param name="cellAddress">Адрес ячейки свойства которой требуется изменить</param>
            <returns>WriteIntent для изменения своиств ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.To(System.Int32,System.Int32)">
            <summary>
            Запись в ячейку или присвоения стиля ячейки с указанным адресом
            </summary>
            <param name="columnNum">Номер колонки ячейки</param>
            <param name="rowNum">Номер строки ячейки</param>
            <returns>WriteIntent для изменения своиств ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.To(System.UInt32,System.UInt32)">
            <summary>
            Запись в ячейку или присвоения стиля ячейки с указанным адресом
            </summary>
            <param name="columnNum"></param>
            <param name="rowNum"></param>
            <returns>WriteIntent для изменения своиств ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.WithStyle(DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Присваивает стиль всей ячейке
            </summary>
            <param name="styleIndex"></param>
            <returns>возвращает "Намерение" изменения данных ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.WriteIntent.WithText(System.String)">
            <summary>
            Задать текст указанной ячейке
            </summary>
            <param name="text">Новый текст ячейки</param>
            <returns>возвращает "Намерение" изменения данных ячейки</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column">
            <summary>
            Класс для работы со столбцом в листе
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.ColumnNum">
            <summary>
            Номер столбца (начиная с 1-го)
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.ColumnName">
            <summary>
            Название столбца, буквы латинского языка
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.Cells">
            <summary>
            Ячейки хранящиеся в данном столбце
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.Worksheet">
            <summary>
            Лист в котором находится этот столбец
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.#ctor(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Конструктор столбца
            </summary>
            <param name="worksheet">Лист в котором находится столбец</param>
            <param name="address">Название столбца или его номер (начиная с 1-го)</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.#ctor(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Конструктор столбца
            </summary>
            <param name="worksheet">Лист в котором находится столбец</param>
            <param name="columnNum">номер столбца (начиная с 1-го)</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.#ctor(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32)">
            <summary>
            Конструктор столбца
            </summary>
            <param name="worksheet">Лист в котором находится столбец</param>
            <param name="columnNum">номер столбца (начиная с 1-го)</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.GetCell(System.UInt32)">
            <summary>
            Получить ячейку по номеру строки.
            Возвращает null если ячейки нет.
            </summary>
            <param name="rowNum">Номер строки</param>
            <returns>Ячейка с соответствующим адресом</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.GetCell(System.Int32)">
            <summary>
            Получить  ячейку на пересечении этой колонки с указанной строкой.
            Возвращает null если ячейки нет.
            </summary>
            <param name="rowNum">Номер строки</param>
            <returns>Ячейка с соответствующим адресом</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.MakeCell(System.UInt32)">
            <summary>
            Создать ячейку на пересечении этой колонки с указанной строкой если ее не существует.
            Если ячейка уже существует, тогда возвращяется существующая ячейка.
            Старая ячейка перезаписана не будет.
            Идентично методу <see cref="!:CellHelper.MakeCell(Worksheet, string)"/>
            </summary>
            <param name="rowNum">Номер строки</param>
            <returns>Ячейка с соответствующим адресом.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Models.Column.MakeCell(System.Int32)">
            <summary>
            Создать ячейку на пересечении этой колонки с указанной строкой если ее не существует.
            Если ячейка уже существует, тогда возвращяется существующая ячейка.
            Старая ячейка перезаписана не будет.
            Идентично методу <see cref="!:CellHelper.MakeCell(Worksheet, string)"/>
            </summary>
            <param name="rowNum">Номер строки</param>
            <returns>Ячейка с соответствующим адресом.</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.RowGetCell">
            <summary>
            Получение и создание ячеек в строке
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.RowGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Row,System.String)">
            <summary>
            Создать ячейку в строке и возвращает созданную ячейку. Если ячейка 
            уже существует, то возвращает существующюю ячейку. Не перезаписывает 
            старую ячейку.
            </summary>
            <param name="row">Объект строки в которой создается ячейка</param>
            <param name="columnName">Название столбца новой ячейки</param>
            <returns>
            Возвращает созданную ячейку. Если ячейка  уже существует, 
            то возвращает существующюю ячейку
            </returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.RowGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Row,System.Int32)">
            <summary>
            Создать ячейку в строке и возвращает созданную ячейку. Если ячейка 
            уже существует, то возвращает существующюю ячейку. Не перезаписывает 
            старую ячейку.
            </summary>
            <param name="row">Объект строки в которой создается ячейка</param>
            <param name="columnNumber">Номер столбца новой ячейки (начиная с 1-го)</param>
            <returns>
            Возвращает созданную ячейку. Если ячейка  уже существует, 
            то возвращает существующюю ячейку
            </returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.RowGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Row,System.UInt32)">
            <summary>
            Создать ячейку в строке и возвращает созданную ячейку. Если ячейка 
            уже существует, то возвращает существующюю ячейку. Не перезаписывает 
            старую ячейку.
            </summary>
            <param name="row">Объект строки в которой создается ячейка</param>
            <param name="columnNumber">Номер столбца новой ячейки (начиная с 1-го)</param>
            <returns>
            Возвращает созданную ячейку. Если ячейка  уже существует, 
            то возвращает существующюю ячейку
            </returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.RowGetCells.GetCells(DocumentFormat.OpenXml.Spreadsheet.Row)">
            <summary>
            Получить все ячейки которые находятся в данной строчке
            </summary>
            <param name="row">Объект строки OpenXML</param>
            <returns>Список ячеек в этой строке</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.RowGetNumber.GetRowNumber(DocumentFormat.OpenXml.Spreadsheet.Row)">
            <summary>
            Получить номер строки
            </summary>
            <param name="row">Объект строки OpenXML</param>
            <returns>Номер данной строки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.SharedStringTableAdd.Add(DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,System.String,DocumentFormat.OpenXml.Spreadsheet.RunProperties)">
            <summary>
            Добавить текст в таблицу <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable"/>
            </summary>
            <param name="sst">Таблица с тектами</param>
            <param name="text">Добавляемый текст</param>
            <param name="rPr">Стиль добавляемого текста</param>
            <returns>Добавленыый элемент в <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable"/> содержащий указанный текст</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Document.CreateBlank(System.String)">
            <summary>
            Создает новый файл документа Excel с единственным листом (Sheet1)
            Возвращает созданный документ
            </summary>
            <param name="filepath">Директория где будет создан файл</param>
            <returns>Возвращает созданный документ</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentGetStylesheet.GetStylesheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Получить таблицу стилей
            </summary>
            <param name="document">Рабочий документ</param>
            <returns>Таблица стилей указанного документа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentGetWorksheet.GetWorksheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>
            Получить рабочий лист
            </summary>
            <param name="doc">Документ, из которого нужно получить лист</param>
            <param name="sheetName">Название требуемого листа</param>
            <returns>Рабочий лист, название которого соответсвует указанному, или null если лист не найден.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentHasWorksheet.HasWorksheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>
            Получить информацию о существовании листа с указанным названием
            </summary>
            <param name="doc">Документ, из которого нужно получить информацию</param>
            <param name="sheetName">Название листа</param>
            <returns>true если лист с таким названием существует в книге, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentNewWorksheet.NewWorksheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>
            Создает новый лист в книге
            </summary>
            <param name="document">Документ таблиц OpenXml</param>
            <param name="sheetName">Наименование нового листа</param>
            <returns>Объект созданного листа Worksheet</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DocumentSaveAndClose.SaveAndClose(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Сохранить изменения и закрыть документ
            </summary>
            <param name="document">Документ над которым производится операция</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetAddDFormat.AddDFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.DifferentialFormat)">
            <summary>
            Добавить формат для условного форматирования ячеек.
            Возвращает индекс добавленного формата.
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <param name="format">Новый формат</param>
            <returns>Индекс добавленного формата</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetGetBorders.GetBorders(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>
            Получить объект стиля содержащий элементы границ ячеек
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <returns>Объект содержащий элементы границ ячеек</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetGetBorders.GetBorder(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Int32)">
            <summary>
            Получить объект стиля границ ячейки
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <param name="borderIndex">Индекс объекта границ ячеек</param>
            <returns>Объект границ ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetGetBorders.GetBorder(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.UInt32)">
            <summary>
            Получить объект стиля границ ячейки
            </summary>
            <param name="stylesheet">Таблица стилей</param>
            <param name="borderIndex">Индекс объекта стиля границ ячеек</param>
            <returns>Объект границ ячейки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetNumFormat.NumFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Int32)">
            <summary>
            Получить формат числа
            </summary>
            <param name="stylesheet">таблица стилей</param>
            <param name="formatIndex">индекс формата числа</param>
            <returns>возвращает объект формата числа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetNumFormat.NumFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.UInt32)">
            <summary>
            Получить формат числа
            </summary>
            <param name="stylesheet">таблица стилей</param>
            <param name="formatIndex">индекс формата числа</param>
            <returns>возвращает объект формата числа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.StylesheetNumFormat.NumFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.NumberingFormat)">
            <summary>
            Вставить формат числа в структуру документа
            </summary>
            <param name="stylesheet">таблица стилей</param>
            <param name="numFormat">формат числа</param>
            <returns>Индекс вставленного формата числа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorkbookPartGetSharedStringItem.GetSharedStringItem(DocumentFormat.OpenXml.Packaging.WorkbookPart,System.Int32)">
            <summary>
            Получить <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringItem"/> по его ID
            </summary>
            <param name="wbPart">Элемент <see cref="T:DocumentFormat.OpenXml.Packaging.WorkbookPart"/></param>
            <param name="itemId">ID элемента <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringItem"/></param>
            <returns>Элемент <see cref="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringItem"/> с указанным ID</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorkbookPartGetStylesheet.GetStylesheet(DocumentFormat.OpenXml.Packaging.WorkbookPart)">
            <summary>
            Получить таблицу со стилями
            </summary>
            <param name="wbPart">Рабочая книга документа</param>
            <returns>Таблицу содержащяя стили документа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorkbookGetWorksheet.GetWorksheet(DocumentFormat.OpenXml.Spreadsheet.Workbook,System.String)">
            <summary>
            Получить лист по его названию. Возвращает null если такой лист не найден
            </summary>
            <param name="workbook">Рабочая книга документа</param>
            <param name="sheetName">Название листа</param>
            <returns>Рабочий лист с указанным названием или null если такой лист не найден</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorkbookHasWorksheet.HasWorksheet(DocumentFormat.OpenXml.Spreadsheet.Workbook,System.String)">
            <summary>
            Получить информацию о существовании листа с указанным названием
            </summary>
            <param name="workbook">Рабочая книга документа</param>
            <param name="sheetName">Название листа</param>
            <returns>true если лист с таким названием существует в книге, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetAddFormattingRule.AddFormattingRule(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,DocumentFormat.OpenXml.Spreadsheet.DifferentialFormat,System.String[])">
            <summary>
            Добавить условное форматирование
            </summary>
            <param name="worksheet">Лист в который добавляется форматирование</param>
            <param name="formattingExpression">Выражение которое определяет ячейки для форматирования</param>
            <param name="style">Стиль условного форматирования</param>
            <param name="targetCellAddresses">Области ячеек для которых будет задействовано данное условие</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetCopyCells.CopyCells(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Копировать ячейки
            </summary>
            <param name="worksheet">Лист из которого ячейки будут скопированы</param>
            <param name="cellsRange">Область копируемых ячеек, указывать в формате A1:B2. Можно указать адрес одной ячейки</param>
            <returns>"Намерение" <see cref="T:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.PasteIntent"/> для вставки ячеек</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetDelete.Delete(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Удаляет лист
            </summary>
            <param name="worksheet">Рабочий лист</param>
            <returns>true при удачном удалении, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.DuplicateWorksheet.Duplicate(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,DocumentFormat.OpenXml.SpreadsheetDocumentType)">
            <summary>
            Копирует лист
            </summary>
            <param name="ws">Исходный лист</param>
            <param name="newSheetName">Имя нового листа</param>
            <param name="docType">Тип исходного листа SpreadsheetDocumentType</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetFindCells.FindCells(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Text.RegularExpressions.Regex)">
            <summary>
            Найти ячейки по его содержанию
            </summary>
            <param name="worksheet">Рабочий лист документа в котором ведется поиск</param>
            <param name="searchRgx">Объект регулярного выражения для поиска</param>
            <returns>Ячейки содержание которых совпадает с данным выражением</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetFindCells.FindCells(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,IEIT.Reports.Export.Helpers.Spreadsheet.MatchOption)">
            <summary>
            Найти ячейки по его содержанию
            </summary>
            <param name="worksheet">Рабочий лист документа в котором ведется поиск</param>
            <param name="searchText">Значение которое должно содержать ячейка</param>
            <returns>Ячейки содержание которых совпадает с указанным значением</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetCell">
            <summary>
            Позволяет получить объект ячейки по указанному адресу из листа (объекта Worksheet).
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Создать ячейку. Если ячейка уже создана в указанном месте, 
            тогда данный метод будет идентичен методу <see cref="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)"/>
            </summary>
            <param name="worksheet">Лист в котором нужно создать ячейку</param>
            <param name="cellAddress">Адрес новой ячейки</param>
            <returns>Созданную ячейку, если ячейка не существовала</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Int32,System.Int32)">
            <summary>
            Создать ячейку. Если ячейка уже создана в указанном месте, 
            тогда данный метод будет идентичен методу <see cref="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)"/>
            </summary>
            <param name="worksheet">Лист</param>
            <param name="columnNumber">Номер колонки ячейки</param>
            <param name="rowNumber">Номер строки ячейки</param>
            <returns>Созданную ячейку, если ячейка не существовала</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32,System.UInt32)">
            <summary>
            Создать ячейку. Если ячейка уже создана в указанном месте, 
            тогда данный метод будет идентичен методу <see cref="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetCell.GetCell(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)"/>
            </summary>
            <param name="worksheet">Лист</param>
            <param name="columnNumber">Номер колонки ячейки</param>
            <param name="rowNumber">Номер строки ячейки</param>
            <returns>Созданную ячейку, если ячейка не существовала</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetColumn.GetColumn(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Получить объект для работы со столбцом, с указанным адресом.
            </summary>
            <param name="worksheet">Объект рабочего листа</param>
            <param name="columnNumber">Номер запрашиваемого столбца (начиная с 1-го)</param>
            <returns>Объект для работы со столбцом</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetColumn.GetColumn(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32)">
            <summary>
            Получить объект для работы со столбцом, с указанным адресом.
            </summary>
            <param name="worksheet">Объект рабочего листа</param>
            <param name="columnNumber">Номер запрашиваемого столбца (начиная с 1-го)</param>
            <returns>Объект для работы со столбцом</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetColumn.GetColumn(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Получить объект для работы со столбцом, с указанным адресом.
            </summary>
            <param name="worksheet">Объект рабочего листа</param>
            <param name="columnName">Название запрашиваемого столбца, латинские буквы.</param>
            <returns>Объект для работы со столбцом</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetName.GetName(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Получить название листа
            </summary>
            <param name="worksheet"></param>
            <returns></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetNamedStyles.GetNamedStyles(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Получить стили по содержимым ячеек
            </summary>
            <param name="worksheet">Лист в котором содержатся необходимые стили</param>
            <returns>Именнованный массив с содержимым ячейки в виде ключа, и с индексом стиля этой ячейки в виде значения</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetSheet.GetSheet(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Получить свойства листа
            </summary>
            <param name="worksheet">Объект листа</param>
            <returns>Объект содержащий свойства листа <see cref="T:DocumentFormat.OpenXml.Spreadsheet.Sheet"/></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetStyles.GetStylesOf``1(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Получение стилей по перечислениям
            </summary>
            <typeparam name="T">Перечисление содержащее названия стилей</typeparam>
            <param name="worksheet">Лист в котором содержатся все стили с названиями соответствующие перечислению</param>
            <returns>Именнованный массив со значением указанного перечисления в виде ключа, и с индексом стиля в виде значения</returns>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetStyles.RGX_NamedStylecellValueFormat">
            <summary>
            Формат регулярного выражения для поиска по названиям стилей
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetStyles.GetStylesOf(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Type)">
            <summary>
            Получение стилей по перечислениям
            </summary>
            <param name="enum">Перечисление содержащее названия стилей</param>
            <param name="worksheet">Лист в котором содержатся все стили с названиями соответствующие перечислению</param>
            <returns>Именнованный массив со значением указанного перечисления в виде ключа, и с индексом стиля в виде значения</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetStyles.GetStyles(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Получить стили по адресам ячеек
            </summary>
            <param name="worksheet">Лист в котором содержатся необходимые стили</param>
            <returns>Именнованный массив с адресом ячейки в виде ключа, и с индексом стиля этой ячейки в виде значения</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetStylesheet.GetStylesheet(DocumentFormat.OpenXml.Spreadsheet.Workbook)">
            <summary>
            Получить таблицу стилей
            </summary>
            <param name="workbook">Рабочая книга документа</param>
            <returns>Таблица стилей указанной рабочей книги</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetGetWorkbookPart.GetWorkbookPart(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Получить часть документа который содержит все рабочие листы.
            </summary>
            <param name="worksheet">Рабочий лист</param>
            <returns>Часть документа который содержит все рабочие листы</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetMergeCells.MergeCells(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Объеденение ячеек по индексам.
            </summary>
            <param name="ws">Лист в котором требуется объединить ячейки</param>
            <param name="columnFrom">Номер начального столбца (начиная с 1)</param>
            <param name="rowFrom">Номер начальной строки (начиная с 1)</param>
            <param name="columnTo">Номер конечного столбца (начиная с 1)</param>
            <param name="rowTo">Номер конечной строки (начиная с 1)</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetMergeCells.MergeCells(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Объединить ячейки
            </summary>
            <param name="worksheet">Лист в котором требуется объединить ячейки</param>
            <param name="cellsRange">Область объединяемых ячеек</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetRename.Rename(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,System.Boolean)">
            <summary>
            Переименовать лист
            </summary>
            <param name="worksheet">Лист который ты хочешь переименовать</param>
            <param name="newName">Новое название листа</param>
            <param name="updateReferences">Заменить все ссылки к данному листу?</param>
            <returns>true при удачном переименовывании, false в обратном случае</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper">
            <summary>
            Класс с расширениями для работы с графиками
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.ChartPartAt(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Получить область с графиком(графиков) по названию ее верхней левой ячейки.
            </summary>
            <param name="ws">Лист в котором находится искомая область</param>
            <param name="cellAddress">Верхняя левая ячейка области графиков</param>
            <returns>Область графика(графиков) верхняя левая грань которой находится в заданной ячейке</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.RelocateTo(DocumentFormat.OpenXml.Packaging.ChartPart,DocumentFormat.OpenXml.Drawing.Spreadsheet.FromMarker,DocumentFormat.OpenXml.Drawing.Spreadsheet.ToMarker)">
            <summary>
            Перенести область графиков 
            </summary>
            <param name="chartPart">Область графиков для перемещения</param>
            <param name="topLeft">Левая верхняя позиция</param>
            <param name="bottomRight">Нижняя правая позиция</param>
            <returns>true - если операция выполнилась успешно, false - в обратном случае.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.RelocateTo(DocumentFormat.OpenXml.Packaging.ChartPart,System.String,System.Int64,System.Int64)">
            <summary>
            Перенести область графиков
            </summary>
            <param name="chartPart">Область графиков для перемещения</param>
            <param name="cellAddress">Позиция области графиков (ячейка, левый верхний край области)</param>
            <param name="columnOffset">Отклонение от левого края ячейки</param>
            <param name="rowOffset">Отклонение от верхнего края ячейки</param>
            <returns>true - если операция выполнилась успешно, false - в обратном случае.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.RelocateTo(DocumentFormat.OpenXml.Packaging.ChartPart,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Перенести область графиков
            </summary>
            <param name="chartPart">Область графиков для перемещения</param>
            <param name="columnNum">Номер колонки (соответствует левому краю области)</param>
            <param name="rowNum">Номер строки (соответствует верхнему краю области)</param>
            <param name="columnOffset">Отклонение от левого края ячейки</param>
            <param name="rowOffset">Отклонение от верхнего края ячейки</param>
            <returns>true - если операция выполнилась успешно, false - в обратном случае.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.RelocateTo(DocumentFormat.OpenXml.Packaging.ChartPart,DocumentFormat.OpenXml.Drawing.Spreadsheet.FromMarker)">
            <summary>
            Переместить область графиков
            </summary>
            <param name="chartPart">Часть документа с графиками</param>
            <param name="topLeft">Верхняя левая позиция области</param>
            <returns>true - если операция выполнилась успешно, false - в обратном случае.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.Anchor(DocumentFormat.OpenXml.Packaging.ChartPart)">
            <summary>
            Получить информацию о местоположении области с графиками
            </summary>
            <param name="chartPart">Область информацию которой нужно получить</param>
            <returns>Сведения о положении области графиков на листе</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.Title(DocumentFormat.OpenXml.Drawing.Charts.Chart,System.String)">
            <summary>
            Задать заголовок графику
            </summary>
            <param name="chart">график</param>
            <param name="newTitleStr">новый заголовок графика</param>
            <returns>true - при удачной замене заголовка, false - в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.Charts(DocumentFormat.OpenXml.Packaging.ChartPart)">
            <summary>
            Получить графики
            </summary>
            <param name="chartPart">Часть документа с графиками</param>
            <returns>Графики в выбранной части документа</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.Charts(DocumentFormat.OpenXml.Drawing.Charts.ChartSpace)">
            <summary>
            Получить графики
            </summary>
            <param name="chartSpace">Область с графиками</param>
            <returns>Графики в выбранной области</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.Title(DocumentFormat.OpenXml.Drawing.Charts.Chart)">
            <summary>
            Получить заголовок
            </summary>
            <param name="chart">График заголовок которогу нужно получить</param>
            <returns>Заголовок выбранного графика</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.ChartHelper.Text(DocumentFormat.OpenXml.Drawing.Charts.Formula,System.String)">
            <summary>
            Задать формулу
            </summary>
            <param name="formula">Контейнер формулы</param>
            <param name="newFormula">Строка с новой формулой</param>
            <returns>Новая формула в виде строки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.AsLineChart(DocumentFormat.OpenXml.Drawing.Charts.Chart)">
            <summary>
            Получить вложенный объект линейного графика из объекта диаграммы
            </summary>
            <param name="chart">Объект содержащий график</param>
            <returns>Линейный график, если в данном объекте диаграммы он есть. В обратном случае возвращается <code>null</code></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.Series(DocumentFormat.OpenXml.Drawing.Charts.LineChart)">
            <summary>
            Получить все ряды из линейного графика
            </summary>
            <param name="lineChart">Линейный график</param>
            <returns>Ряды из данного линейного графика, или <code>null</code> если их нет</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.Values(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries)">
            <summary>
            Получить формулу значении
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <returns>Формула значении ряда линейного графика</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.Values(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries,DocumentFormat.OpenXml.Drawing.Charts.Formula)">
            <summary>
            Задать формулу значении ряда
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <param name="newFormula">Новая формула значении</param>
            <returns>true - если формула успешно задана, false - в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.Values(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries,System.String)">
            <summary>
            Задать формулу ряда
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <param name="newFormulaStr">Новая формула</param>
            <returns>true - если формула успешно задана, false - в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.AxisValues(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries)">
            <summary>
            Получить формулу значении (горизонтальной) оси
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <returns>Формула значении оси ряда линейного графика</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.AxisValues(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries,DocumentFormat.OpenXml.Drawing.Charts.Formula)">
            <summary>
            Задать формулу значении (горизонтальной) оси
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <param name="newFormula">Новая формула значении</param>
            <returns>true - если формула успешно задана, false - в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.AxisValues(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries,System.String)">
            <summary>
            Задать формулу значении (горизонтальной) оси
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <param name="newFormulaStr">Новая формула значении в виде строки</param>
            <returns>true - если формула успешно задана, false - в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.Label(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries)">
            <summary>
            Получить ссылку на ячейки составляющее названия ряда или номер ряда
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <returns>Формулу названия или номер ряда</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.Label(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries,DocumentFormat.OpenXml.Drawing.Charts.Formula)">
            <summary>
            Задать название ряда ссылкой на ячейки
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <param name="newFormula">Формула-ссылка названия ряда</param>
            <returns>true - если название успешно задано, false - в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Charts.LineChartHelper.Label(DocumentFormat.OpenXml.Drawing.Charts.LineChartSeries,System.String)">
            <summary>
            Задать название ряда ссылкой на ячейки
            </summary>
            <param name="series">Ряд значении линейного графика</param>
            <param name="newFormulaStr">Формула-ссылка названия ряда</param>
            <returns>true - если название успешно задано, false - в обратном случае</returns>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.CONFIG_KEY_ELEMENTS_PATH">
            <summary>
            Название параметра в App.Config или Web.Config в котором хранится
            путь к директории с XML элементами необходимые для работы всех расширении
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ElementsDir">
            <summary>
            Путь к директории с XML элементами
            </summary>
        </member>
        <member name="P:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.AssemblyDirectory">
            <summary>
            Полный путь к папке, где лежит DLL с данной библиотекой
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.GetFullPath(System.String)">
            <summary>
            Получить полный путь относительно папки где лежит DLL с данной библиотекой
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ToRowNum(System.String)">
            <summary>
            Получить номер строки из адреса ячейки
            </summary>
            <param name="address">Адрес ячейки</param>
            <returns></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ToColumNum(System.String)">
            <summary>
            Получить номер колонки (начиная с 1-го)
            </summary>
            <param name="address">Адрес ячейки или индекс колонки</param>
            <returns>Номер колонки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ToColumnName(System.String)">
            <summary>
            Получить индекс колонки в буквенном значении
            </summary>
            <param name="address">Номер колонки (начиная с 1-го) или номер колонки</param>
            <returns>Индекс колонки в буквенном значении</returns>
            <example>Utils.ToColumnName("C14") => "С" или Utils.ToColumnName("5") => "E"</example>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ToColumnName(System.Int32)">
            <summary>
            Получить индекс колонки в буквенном значении
            </summary>
            <param name="columnNumber">Номер колонки (начиная с 1-го). Значение должно быть больше нуля.</param>
            <returns>Индекс колонки в виде буквы латинского языка</returns>
            <example>Utils.ToColumnName(2) => "B"</example>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ToColumnName(System.UInt32)">
            <summary>
            Получить индекс колонки в буквенном значении
            </summary>
            <param name="columnNumber">Номер колонки (начиная с 1-го). Значение должно быть больше нуля.</param>
            <returns>Индекс колонки в виде буквы латинского языка</returns>
            <example>Utils.ToColumnName(2) => "B"</example>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.IsCellAddress(System.String)">
            <summary>
            Узнать, является ли данная строка адресом ячейки
            </summary>
            <param name="value">Проверяемая строка</param>
            <returns>true если данная строка является валидным адресом ячейки, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.GetDefaultElement(System.String)">
            <summary>
            Получить XML по ID элемента
            </summary>
            <param name="id">ID элемента, путь к XML файлу относительно папки с XML элеметнами</param>
            <returns>Контент XML файла по указанному пути</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.From``1(``0,System.String)">
            <summary>
            Создает елемент из указанного файла
            </summary>
            <typeparam name="T">Тип элемента</typeparam>
            <param name="element">Элемент, который будет переопределен элементом из файла</param>
            <param name="id">ID элемента, путь к XML файлу относительно папки с XML элеметнами</param>
            <returns></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.FirstDescendant``1(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Получить первого потомка с указанным типом
            </summary>
            <typeparam name="T">Тип искомого потомка</typeparam>
            <param name="element">Родительский элемент, потомок которого нужно найти</param>
            <returns>
            Потомок типа <typeparamref name="T"/> для элемента <paramref name="element"/>
            или null если потомок не найден
            </returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ReplaceBy``2(``0,``1)">
            <summary>
            Заменяет один элемент в древе другим элементом.
            Не требует отвязки элементов от их древа, и не удаляет
            заменяющий элемент из его дерева.
            </summary>
            <typeparam name="T1">Тип заменяемого элемента</typeparam>
            <typeparam name="T2">Тип заменяющего элемента</typeparam>
            <param name="oldElement">Заменяемый элемент</param>
            <param name="newElement">Заменяющий элемент</param>
            <returns>Новый элемент после замены</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.IsNumber(System.Object)">
            <summary>
            Проверяет, является ли значение числом
            </summary>
            <param name="value">Проверяемое значение</param>
            <returns>true если значение числовое, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ToDrawingText(System.String)">
            <summary>
            Преобразует значение в объект <see cref="T:DocumentFormat.OpenXml.Drawing.Text"/>
            </summary>
            <param name="str">Преобразуемое значение</param>
            <returns>Объект типа <see cref="T:DocumentFormat.OpenXml.Drawing.Text"/> с исходным значением <paramref name="str"/></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ToText(System.String)">
            <summary>
            Преобразует значение в объект <see cref="T:DocumentFormat.OpenXml.Spreadsheet.Text"/>
            </summary>
            <param name="str">Преобразуемое значение</param>
            <returns>Объект типа <see cref="T:DocumentFormat.OpenXml.Spreadsheet.Text"/> с исходным значением <paramref name="str"/></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.CellAddressesFrom(System.String)">
            <summary>
            Получить адреса ячеек из адреса ряда ячеек
            </summary>
            <param name="cellsRange">Адрес ряда ячеек</param>
            <returns>Массив из адресов ячеек находящиеся в указанном промежутке</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.Replace``1(``0,System.String,System.String)">
            <summary>
            Заменяет все вхождения одной строки другой строкой
            </summary>
            <typeparam name="T">Тип элемента <see cref="T:DocumentFormat.OpenXml.OpenXmlLeafTextElement"/></typeparam>
            <param name="formula">Элемент, текст которого будет преобразован</param>
            <param name="oldValue">Заменяемое значение</param>
            <param name="newValue">Заменяющее значение</param>
            <returns>Исходный элемент с измененным значением <paramref name="formula"/></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.RegexReplace``1(``0,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Заменяет все вхождения регулярного выражения
            </summary>
            <typeparam name="T">Тип элемента <see cref="T:DocumentFormat.OpenXml.OpenXmlLeafTextElement"/></typeparam>
            <param name="formula">Элемент, текст которого будет преобразован</param>
            <param name="pattern">Искомое регулярное выражение</param>
            <param name="replacement">Заменяющее значение</param>
            <param name="options">Дополнительные параметры регулярного выражения</param>
            <returns>Исходный элемент с измененным значением <paramref name="formula"/></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.RegexReplaceIn``1(DocumentFormat.OpenXml.OpenXmlElement,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Заменяет все вхождения регулярного выражения в дочерних элементах типа <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Тип элемента <see cref="T:DocumentFormat.OpenXml.OpenXmlLeafTextElement"/></typeparam>
            <param name="element">Родительский элемент, дочерние объекты которого будут преобразованы</param>
            <param name="pattern">Искомое регулярное выражение</param>
            <param name="replacement">Заменяющее значение</param>
            <param name="options">Дополнительные параметры регулярного выражения</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ReplaceIn``1(DocumentFormat.OpenXml.OpenXmlElement,System.String,System.String)">
            <summary>
            Заменяет все вхождения одной строки другой строкой в дочерних 
            элементах типа <typeparamref name="T"/> данного объекта 
            </summary>
            <typeparam name="T">Тип элемента <see cref="T:DocumentFormat.OpenXml.OpenXmlLeafTextElement"/></typeparam>
            <param name="element">Родительский элемент, дочерние объекты которого будут преобразованы</param>
            <param name="oldValue">Заменяемое значение</param>
            <param name="newValue">Заменяющее значение</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.SameAs``1(``0,``0)">
            <summary>
            Определяет, являются ли два элемента схожими.
            Даже если два элемента null он определяет их как одинаковые.
            Не зависит от положения в древе так как используется 
            метод <see cref="M:DocumentFormat.OpenXml.OpenXmlElement.CloneNode(System.Boolean)"/> перед сравнением
            </summary>
            <typeparam name="T">Тип сравниваемых элементов</typeparam>
            <param name="source">Первое сравниваемый элемент</param>
            <param name="target">Второй сравниваемый элемент</param>
            <returns>true если два элемента схожи, false в обратном случае</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ParentOfType``1(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Получить ближайшего родителя типа <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Тип искомого родителя</typeparam>
            <param name="element">Элемент, родителя которого требуется найти</param>
            <returns>Ближайший родительский элемент типа <typeparamref name="T"/></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.ParentPartOfType``1(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Получить ближайшего родительской части документа типа <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Тип искомого родителя</typeparam>
            <param name="part">Часть документа, предка котого требуется найти</param>
            <returns>Ближайший предок типа <typeparamref name="T"/></returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.Utils.Index(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Получить индекс элемента в родительском списке, начинается с нуля.
            </summary>
            <param name="element">Элемент индекс которого нужно найти</param>
            <returns>Индекс данного элемента среди элементов родителя, начинается с нуля.</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetWriter.Write(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Записать значение в ячейку
            <para>- запись текста</para>
            <para>- запись числа</para>
            <para>- запись формулы</para>
            </summary>
            <param name="ws">Лист в который требуется записать значение</param>
            <param name="value">Значение которое нужно записать</param>
            <returns>Намерение, с помощью которого производится запись</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetWriter.Write(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Object)">
            <summary>
            Записать значение в ячейку
            </summary>
            <param name="ws">Лист в который требуется записать значение</param>
            <param name="value">Значение которое нужно записать</param>
            <returns>Намерение, с помощью которого производится запись</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetWriter.WriteText(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Записать текст в ячейку
            </summary>
            <param name="ws">Лист в который требуется записать значение</param>
            <param name="value">Значение которое нужно записать</param>
            <returns>Намерение, с помощью которого производится запись</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetWriter.WriteFormula(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Записать формулу в ячейку
            </summary>
            <param name="ws">Лист в который требуется записать значение</param>
            <param name="value">Значение которое нужно записать</param>
            <returns>Намерение, с помощью которого производится запись</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetWriter.WriteNumber(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Записать число в ячейку
            </summary>
            <param name="ws">Лист в который требуется записать значение</param>
            <param name="value">Значение которое нужно записать</param>
            <returns>Намерение, с помощью которого производится запись</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet.WorksheetWriter.SetStyle(DocumentFormat.OpenXml.Spreadsheet.Worksheet,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Назначить стиль ячейки
            </summary>
            <param name="ws">Лист в которыом нужно изменить стиль</param>
            <param name="styleIndex">ID стиля</param>
            <returns>Намерение, с помощью которого производится запись</returns>
        </member>
        <member name="T:IEIT.Reports.Export.Helpers.Spreadsheet._WorksheetGetRow">
            <summary>
            Получение и создание строк в листе
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet._WorksheetGetRow.GetRow(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32)">
            <summary>
            Получить строку. 
            Создается новый элемент строки, если строка еще не существует.
            </summary>
            <param name="worksheet">Лист в котором находится требуемая строка</param>
            <param name="rowNum">Номер запрашиваемой строки</param>
            <returns>Объект строки</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Spreadsheet._WorksheetGetRow.GetRow(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Получить строку. Создается новый элемент строки, если строка еще не существует.
            </summary>
            <param name="worksheet">Лист в котором находится требуемая строка</param>
            <param name="rowNum">Номер запрашиваемой строки</param>
            <returns>Объект строки</returns>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Common.RGX_PAT_CA">
            <summary>
            Регулярное выражения соответствующее адресу ячейки
            Regular expression pattern for cell address
            </summary>
        </member>
        <member name="F:IEIT.Reports.Export.Helpers.Common.RGX_PAT_CA_RANGE">
            <summary>
            Регулярное выражение соответствующее ряду адресов ячеек
            Regular expression pattern for cell address range
            </summary>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Common.AppendText``1(``0,System.String,DocumentFormat.OpenXml.Spreadsheet.RunProperties)">
            <summary>
            Добавить текст в элемент типа <see cref="T:DocumentFormat.OpenXml.Spreadsheet.RstType"/> с указанным стилем
            </summary>
            <param name="item">Элемент к которому прибавляется текст</param>
            <param name="text">Добавляемый текст</param>
            <param name="rPr">Стиль добавляемого текста</param>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Common.Insert``1(DocumentFormat.OpenXml.OpenXmlElement,``0)">
            <summary>
            Добавить элемент в дерево дочерних элементов. Возвращает "намерение" <see cref="T:IEIT.Reports.Export.Helpers.Spreadsheet.Intents.InsertElementIntent`1"/> для вставки элемента
            </summary>
            <typeparam name="T">Тип нового элемента</typeparam>
            <param name="parent">Родительский элемент в которую производится вставка</param>
            <param name="newChild">Вставляемый элемент</param>
            <returns>"Намерение" для вставки элемента</returns>
        </member>
        <member name="M:IEIT.Reports.Export.Helpers.Common.MakeSame``1(DocumentFormat.OpenXml.OpenXmlElement,``0,System.Boolean)">
            <summary>
            Создает дочерний элемент в родительском объекте.
            Возвращает индекс созданного элемента.
            При указанном параметре <paramref name="allowDublicates"/> 
            как false (по умолчанию). Не создает обект если подобный уже 
            имеется, и возвращает индекс уже имеющегося элемента.
            </summary>
            <typeparam name="T">Тип нового элемента</typeparam>
            <param name="parent">Родительский элемент в котором создается новый объект</param>
            <param name="newElement">Создаваемый элемент</param>
            <param name="allowDublicates">
            Если указан как false (по умолчанию). Не создает обект
            если подобный уже имеется. При значении true, создает новый
            дочерний элемент в любом случае.
            </param>
            <returns>Индекс нового элемента, или индекс уже имеющегося элемента.</returns>
        </member>
    </members>
</doc>
